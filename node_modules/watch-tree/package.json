{
  "name": "watch-tree",
  "version": "0.1.1",
  "description": "Yet another library for watching FS trees. Includes a JSON-on-stdout command-line tool and {filePreexisted,allPreexistingFilesReported} events.",
  "url": "https://github.com/tafa/node-watch-tree",
  "main": "lib/watch-tree.js",
  "bin": {
    "watch-tree": "bin/watch-tree"
  },
  "dependencies": {
    "optimist": ">=0.1.2",
    "async": ">=0.1.7",
    "underscore": ">=1.1.4",
    "coffee-script": ">=1.0.0",
    "async_testing": ">=0.3.2"
  },
  "author": {
    "name": "Andrew Schaaf",
    "email": "andrew@andrewschaaf.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/tafa/node-watch-tree.git"
  },
  "readme": "\n\n## watch-tree\n\n...is yet another NodeJS FS-watching library. If it happens to suit your needs better than the others, enjoy!\n\nThe current implementation maintains a ring of paths (both files and dirs), and stats the next one every (<code>--sample-rate=</code>) ms.\n\nMore efficient implementations will be added eventually, including inotify (for Linux) and FSEvents (for Mac), with the appropriate one being compiled at (<code>npm install</code>)-time.\n\nYour code won't notice the difference when that happens, but your battery life might.\n\n## Installing\n<pre>\nnpm install watch-tree\n</pre>\n\n## Command-line tool\n\n### Usage\n<pre>\nwatch-tree [[relative_]path]\n    [--ignore=(...regex...)]\n    [--match=(...regex...)]\n    [--sample-rate=(...ms...)]\n</pre>\n\n### Example\n<pre>\ncd ~/repos/watch-tree; watch-tree '--ignore=/\\.'\n</pre>\nstdout:\n<pre>\n...\n[\"filePreexisted\",\"/Users/a/repos/node-watch-tree/README.md\",\"2011-01-14T18:34:56.000Z\"]\n[\"allPreexistingFilesReported\"]\n[\"fileModified\",\"/Users/a/repos/node-watch-tree/README.md\",\"2011-01-14T18:35:05.000Z\"]\n[\"fileCreated\",\"/Users/a/repos/node-watch-tree/foo\",\"2011-01-14T18:35:07.000Z\"]\n[\"fileDeleted\",\"/Users/a/repos/node-watch-tree/foo\"]\n</pre>\n\n## NodeJS\n\nThe watcher returned by <code>.watchTree</code> is a [NodeJS <code>EventEmitter</code>](http://nodejs.org/docs/v0.3.4/api/events.html) instance.\n\n<pre>\nwatcher = require('watch-tree').watchTree(path, {'sample-rate': 5});\nwatcher.on('fileDeleted', function(path) {\n    console.log(\"Quoth the walrus: Noooo, they're deleting mah \" + path + \"!\");\n});\n</pre>\n\n\n### Events\n\n<table>\n    <tr>\n        <th>Event</th>\n        <th>Callback Arguments</th>\n    </tr>\n    <tr>\n        <td>filePreexisted</td>\n        <td>path, stats</td>\n    </tr>\n    <tr>\n        <td>allPreexistingFilesReported</td>\n        <td></td>\n    </tr>\n    <tr>\n        <td>fileCreated</td>\n        <td>path, stats</td>\n    </tr>\n    <tr>\n        <td>fileModified</td>\n        <td>path, stats</td>\n    </tr>\n    <tr>\n        <td>fileDeleted</td>\n        <td>path</td>\n    </tr>\n</table>\n\n...where <code>stats</code> is a [NodeJS fs.Stats](http://nodejs.org/docs/v0.3.4/api/fs.html#fs.stat) instance.\n\n## Developing\n<pre>\n# Install\ngit clone https://github.com/tafa/node-watch-tree.git; cd node-watch-tree\nnpm link\n\n# Develop\ncoffee -cwlo lib src\n\n# Push\ncake build &amp;&amp; cake test\n</pre>\n",
  "_id": "watch-tree@0.1.1",
  "_from": "watch-tree@>= 0.1.1"
}
