{
  "name": "async_testing",
  "description": "A simple Node testing library.",
  "version": "0.3.2",
  "author": {
    "name": "Benjamin Thomas"
  },
  "main": "./index",
  "directories": {
    "lib": "./lib"
  },
  "bin": {
    "node-async-test": "./bin/node-async-test.js"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/bentomas/node-async-testing.git"
  },
  "bugs": {
    "url": "http://github.com/bentomas/node-async-testing/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/bentomas/node-async-testing/blob/master/LICENSE"
    }
  ],
  "dependencies": {},
  "contributors": [
    {
      "name": "Benjamin Thomas",
      "email": "benjamin@benjaminthomas.org"
    },
    {
      "name": "Gabriel Farrell",
      "email": "gsf747@gmail.com"
    },
    {
      "name": "Cl√©ment Node",
      "email": "clement.nodet@gmail.com"
    }
  ],
  "readme": "node-async-testing\n==================\n\nA simple test runner for testing asynchronous code\n\nGoals of the project:\n\n+ Tests should just be functions. Simple and intuitive.\n+ You shouldn't have to learn new assertion functions.  Use the assertion module\n  that comes with Node. If you are familiar with it you won't have any problems.\n+ Test files should be executable by Node.  No preprocessors or eval.  If your\n  test file is called \"my_test_file.js\" then \"node my_test_file.js\" should run\n  the tests.\n+ Node is asynchronous, so testing should be too.\n+ Not another Behavior Driven Development testing framework. I don't\n  like specifications and what not. They only add verbosity.\n+ Make no assumptions about the code being tested.  You should be able to test\n  any code, and all aspects of it.\n+ Be able to run tests in parallel or serially.  Running tests in parallel is\n  much quicker, but makes it harder to deal with errors.\n\nFeedback/suggestions encouraged!\n\nExample\n-------\n\n**examples/test-suite.js**:\n\n    exports['asynchronous test'] = function(test) {\n      setTimeout(function() {\n        test.ok(true);\n        test.finish();\n      },500);\n    };\n\n    exports['synchronous test'] = function(test) {\n      test.ok(true);\n      test.finish();\n    };\n\n    exports['test assertions expected'] = function(test) {\n      test.numAssertions = 1;\n\n      test.ok(true);\n      test.finish();\n    }\n\n    exports['test catch async error'] = function(test) {\n      var e = new Error();\n\n      test.uncaughtExceptionHandler = function(err) {\n        test.equal(e, err);\n        test.finish();\n      }\n\n      setTimeout(function() {\n          throw e;\n        }, 500);\n    };\n\n    // if this module is the script being run, then run the tests:\n    if (module == require.main) {\n      require('async_testing').run(__filename, process.ARGV);\n    }\n\nThe above file can be run on the command line with:\n\n    node examples/test-suite.js\n\nInstalling\n----------\n\n**node-async-testing** can be installed using npm\n\n    npm install async_testing\n\nDetailed Overview\n-----------------\n\nThe hard part of writing a test suite for asynchronous code is that when a test\nfails, you don't know which test it was that failed. Errors won't get caught by\n`try`/`catch` statements.\n\n**node-async-testing** addresses that by\n\n1.  Giving each test its own unique assert object. This way you know which\n    assertions correspond to which tests.\n2.  Running (by default) the tests one at a time.  This way it is possible to\n    add a global exceptionHandler to the process and catch the errors whenever\n    they happen.\n3.  Requiring you to tell the test runner when the test is finished.  This way\n    you don't have any doubt as to whether or not an asynchronous test still\n    has code to run.\n4.  Allowing you to declare how many assertions should take place in a test.\n    This way you can ensure that your callbacks aren't being called too many\n    or too few times.\n\n**node-async-testing** tests are just a functions:\n\n    function asynchronousTest(test) {\n      setTimeout(function() {\n        // make an assertion (these are just regular Node assertions)\n        test.ok(true);\n        // finish the test\n        test.finish();\n      });\n    }\n\nAs you can see, these test functions receive a `test` object, which is where all\nthe action takes place. You make your assertions using this object (`test.ok()`,\n`test.deepEquals()`, etc) and use it to finish the test (`test.finish()`).\nBasically, all the actions that are directly related to a test use this object.\n\n**node-async-testing** makes no assumptions about tests, so even if your test is\nnot asynchronous you still have to finish it:\n\n    function synchronousTest(test) {\n      test.ok(true);\n      test.finish();\n    };\n\n**node-async-testing** is written for running suites of tests, not individual\ntests. A test suite is just an object with test functions:\n\n    var suite = {\n      asynchronousTest: function(test) {\n        setTimeout(function() {\n          test.ok(true);\n          test.finish();\n        });\n      },\n      synchronousTest: function(test) {\n        test.ok(true);\n        test.finish();\n      }\n    }\n\n**node-async-testing** lets you be explicit about the number of assertions run\nin a given test: set `numAssertions` on the test object. This can be\nvery helpful in asynchronous tests where you want to be sure all callbacks\nget fired:\n\n    suite['test assertions expected'] = function(test) {\n      test.numAssertions = 1;\n\n      test.ok(true);\n      test.finish();\n    }\n\n**node-async-testing** lets you deal with uncaught errors.  If you expect an\nerror to be thrown asynchronously in your code somewhere (this is not good\npractice, but sometimes when using other people's code you have no choice.  Or\nmaybe _it is_ what you want to happen, who am I to judge?), you can set an\n`uncaughtExceptionHandler` on the test object:\n\n    suite['test catch async error'] = function(test) {\n      var e = new Error();\n\n      test.uncaughtExceptionHandler = function(err) {\n        test.equal(e, err);\n        test.finish();\n      }\n\n      setTimeout(function() {\n          throw e;\n        }, 500);\n    };\n\n**node-async-testing** doesn't have an explicit way for writing setup or\nteardown functions, but because all tests are just functions, doing setup or\nteardown is as simple as writing a wrapper function which takes a test and\nreturns a new test:\n\n    function setup(testFunc) {\n      return function newTestFunc(test) {\n        // run set up code here...\n        var extra1 = 1\n        var extra2 = 2;\n\n        // pass the variables we just created to the original test function\n        testFunc(test, extra1, extra2);\n      }\n    }\n\n    suite['wrapped test'] = setup(function(test, one, two) {\n      test.equal(1, one);\n      test.equal(2, two);\n      test.finish();\n    });\n\n**node-async-testing** comes with a convenience function for wrapping all tests\nin a suite with a setup/teardown function:\n\n    require('async_testing').wrapTests(suite, setup);\n\nSee `test/test-wrap_tests.js` for more detailed examples of wrapping in action.\nOr for that matter, check out any of the files in the `test` directory to see\nall that **node-async-testing** has to offer.\n\nRunning Test Suites\n-------------------\n\n**node-async-testing** assumes you are going to have a one to one mapping\nbetween suites and files.  So, to run a test suite, you actually tell it to run\nthe file:\n\n    require('async_testing').run('test-suite.js');\n\nThe `run` method can take a file name or a directory name (it\nrecursively searches directories for javascript files that start with `test-`)\nor an array of any combination of those two options.\n\nIn order for **node-async-testing** to be able to run a file, the exports\nobject of the module needs to be the test suite:\n\n    // create suite:\n    exports['first test'] = function(test) { ... };\n    exports['second test'] = function(test) { ... };\n    exports['third test'] = function(test) { ... };\n\nWe want to be able to run suites via the `node` command. Here's\nhow to make a script executable by Node.  Some where in the file put\nthis code:\n\n    // if this module is the script being run, then run the tests:\n    if (module === require.main) {\n      require('async_testing').run(__filename);\n    }\n\nThat suite can now be run by executing the following on the command line (if it\nwere in a file called `test-suite.js`):\n\n    node test-suite.js\n\nAdditionally, the `run` method can be passed the `process.ARGV` array of command\nline arguments, so **node-async-testing** settings can be altered at run time:\n\n    exports['first test'] = function(test) { ... };\n    exports['second test'] = function(test) { ... };\n    exports['third test'] = function(test) { ... };\n\n    if (module === require.main) {\n      require('async_testing').run(__filename, process.ARGV);\n    }\n\nNow, you could tell **node-async-testing** to run the tests in parallel:\n\n    node test-suite.js --parallel\n\nOr to only run some specific tests:\n\n    node test-suite.js --test-name \"first test\" --test-name \"third test\"\n\nUse the `help` flag to see all the options:\n\n    node test-suite.js --help\n\n**node-async-testing** also comes with a command line script that will run all\ntest files in a specified directory. To use the script, make sure\n**node-async-testing** has been installed properly and then run:\n\n    node-async-test tests-directory\n\nOr you could give it a specific file to run:\n\n    node-async-test tests-directory/test-suite.js\n\nIt takes the same arguments as can be used on an individual file above.\nCheck out `node-async-test --help` for the complete list of options.\n\nThe advantage of using the `node-async-test` command is that its exit status\nwill output the number of failed tests.  This way you can write shell scripts\nthat do different things depending on whether or not the suite was successful.\n\nIf you want to organize your tests in a different manner and not have them\norganized by file you are going to have to write your own test runner. See \n`runSuite()` in `lib/async_testing.js` for more details.\n\nWeb Test Runner\n---------------\n\n**node-async-testing** comes with a \"web\" test runner.  This runner launches a\nweb server which can be used to run suites manually.  Launch it with the\n`--web` flag:\n\n    node test/test-suite.js --web\n\nOr\n \n    node-async-test --web tests-directory\n\nOnce the server is started, from a browser you can pick and choose which suites\nto run, and run them as many times as you like.  **node-async-testing** reloads\nthe suites (and any code they use) from scratch each time they are run so you\ncan leave the web server running and switch back and forth between editing tests\nor code and running the tests. Very handy!\n\nTo use the web runner you also need to install [Socket.IO][socket] and\n[node-webworker][webwork]:\n\n    npm install socket.io webworker\n\n\\[The server is known to work in the lastest versions of Safari, Chrome and\nFirefox.  Any help in getting it to work in Opera would be much appreciated. I\ndon't have means of testing in IE.\\]\n\nCustom Assertion Functions\n--------------------------\nIt is possible to write your own assertion functions that are fully supported\nby **node-async-testing**.  You can't just use any assert function at any time\nbecause **node-async-testing** needs to know which assertions go with which\ntests. As such each test is given its own unique wrapped assertion methods.  To\nadd your own assertion function use the `registerAssertion()` method.\n\n    var async_testing = require('async_testing');\n    async_testing.registerAssertion('assertionName', function() { ... });\n\n    exports['test assert'] = function(test) {\n      test.assertionName();\n      test.finish();\n    }\n\nSee `test/test-custom_assertions.js` for a working example.\n\nCustom Reporting\n----------------\n\nIt is possible to write your own test runners.  See `node-async-test`,\n`lib/console-runner.js` or `lib/web-runner.js` for examples, or `API.markdown`\nfor a description of the different events and what arguments they receive.\n\nThis feature is directly inspired by Caolan McMahon's [nodeunit].  Which is an\nawesome library.\n\n[nodeunit]: http://github.com/caolan/nodeunit\n[socket]: http://github.com/LearnBoost/Socket.IO-node\n[webwork]: http://github.com/pgriess/node-webworker\n",
  "_id": "async_testing@0.3.2",
  "_from": "async_testing@>=0.3.2"
}
